allprojects {
    repositories {
        mavenCentral()
    }
}

defaultTasks 'build' // For BuildHive

subprojects {
    group = "org.jenkinsci.plugins"
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'maven' // For artifactory publishing
    sourceCompatibility = 1.5
    targetCompatibility = 1.5
    dependencies {
        compile 'org.codehaus.groovy:groovy-all:1.8.6'
        compile 'com.google.guava:guava:14.0.1'
        testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
        testCompile 'junit:junit-dep:4.10'
    }
    test {
        useJUnit() // Causes "failed to create temp file to extract class from jar into"
    }

    task jarSources(type:Jar){
        from sourceSets.main.allSource
        classifier = 'source'
    }

    task jarJavadocs (type: Jar, dependsOn: 'javadoc') {
        from project.javadoc.destinationDir
        classifier = 'javadoc'
    }

    task jarGroovydocs (type: Jar, dependsOn: 'groovydoc') {
        from project.groovydoc.destinationDir
        classifier = 'groovydoc'
    }

    artifacts {
        archives jarJavadocs
        archives jarGroovydocs
        archives jarSources
    }

}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.3'
    }
}

private Properties loadDotJenkinsOrg() {
    Properties props = new Properties()
    def dot = new File(new File(System.getProperty("user.home")), ".jenkins-ci.org")
    if (!dot.exists())
        throw new Exception("Trying to deploy to Jenkins community repository but there's no credential file ${dot}. See https://wiki.jenkins-ci.org/display/JENKINS/Dot+Jenkins+Ci+Dot+Org")
    dot.withInputStream { i -> props.load(i) }
    return props
}

project(':job-dsl-core') {
    apply plugin: 'application'

    description = "Generates Jenkins jobs via a DSL"
    dependencies {
        compile 'org.slf4j:slf4j-simple:1.4.3' // For perforce
        compile 'commons-codec:commons-codec:1.8' // For perforce
        compile 'org.apache.ivy:ivy:2.2.0' // Groovy Optional dependency, needed for @Grab
        compile 'xmlunit:xmlunit:1.4' // For runtime use, not just for testing
    }
    jar {
        manifest {
            attributes('Main-Class': 'javaposse.jobdsl.Run')
        }
    }
    mainClassName = 'javaposse.jobdsl.Run'

    apply plugin: 'gradle-one-jar'

    task oneJar(type: OneJar) {
        mainClass = project.mainClassName
    }

    artifacts {
        archives oneJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                def props = loadDotJenkinsOrg()
                repository(url: 'http://maven.jenkins-ci.org:8081/content/repositories/releases') {
                    authentication(userName:props["userName"], password:props["password"])
                }
                snapshotRepository(url: 'http://maven.jenkins-ci.org:8081/content/repositories/snapshots') {
                    authentication(userName:props["userName"], password:props["password"])
                }
            }
        }
    }


    run {
        if ( project.hasProperty('args') ) {
            args project.args.split('\\s+')
        }
    }

}

project(':job-dsl-plugin') {
    description = "This plugin allows definition of Jobs via a DSL, using existing Jobs as a template."
    dependencies {
        compile project(':job-dsl-core')
    }
}

task wrapper(type: Wrapper) { gradleVersion = '1.7' }

apply from: './job-dsl-plugin/ide.gradle'
