allprojects {
    buildscript {
        repositories {
            mavenCentral()
        }
    }
    repositories {
        mavenCentral()
    }
}

defaultTasks 'build' // For BuildHive

subprojects {
    group = "org.jenkinsci.plugins"
    apply plugin: 'groovy'
    sourceCompatibility = 1.5
    targetCompatibility = 1.5
    dependencies {
        //groovy localGroovy() // Can't guarantee 1.8.6
        groovy 'org.codehaus.groovy:groovy-all:1.8.6'
        compile 'xmlunit:xmlunit:1.1' // For runtime use, not just for testing
        compile 'com.google.guava:guava:13.0.1'
        testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
        testCompile 'junit:junit:4.10'
    }
    test {
        useJUnit() // Causes "failed to create temp file to extract class from jar into"
    }
}

buildscript {
    repositories {
        mavenRepo url:'http://repo.smokejumperit.com'
    }
    dependencies {
        classpath 'com.smokejumperit:gradle-plugins:0.8.2'
    }
}

project(':job-dsl-core') {
    description = "Generates Jenkins jobs via a DSL"
    dependencies {
        compile 'org.slf4j:slf4j-simple:1.4.3' // For perforce
        compile 'commons-codec:commons-codec:1.4' // For perforce
    }
    jar {
        manifest {
            attributes('Main-Class': 'javaposse.jobdsl.Run')
        }
    }

    apply plugin:com.smokejumperit.gradle.OneJarPlugin

    task run(type:JavaExec, dependsOn:build) {
        classpath sourceSets.main.runtimeClasspath
        main 'javaposse.jobdsl.Run'
        args rootProject.hasProperty('args')?rootProject.args:'test.dsl'
    }
}

project(':job-dsl-plugin') {
    description = "This plugin allows definition of Jobs via a DSL, using existing Jobs as a template."
    dependencies {
        compile project(':job-dsl-core')
    }
}

task wrapper(type: Wrapper) { gradleVersion = '1.4' }

apply from: './job-dsl-plugin/ide.gradle'
