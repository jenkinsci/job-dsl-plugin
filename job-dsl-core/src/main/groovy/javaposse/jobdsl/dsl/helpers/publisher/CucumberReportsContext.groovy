package javaposse.jobdsl.dsl.helpers.publisher

import javaposse.jobdsl.dsl.Context

class CucumberReportsContext implements Context {

    String jsonReportDirectory
    String fileIncludePattern
    String fileExcludePattern

    int failedStepsNumber
    int skippedStepsNumber
    int pendingStepsNumber
    int undefinedStepsNumber
    int failedScenariosNumber
    int failedFeaturesNumber
    String buildStatus

    int trendsLimit
    boolean parallelTesting
    List<Classification> classifications

    /**
     * The path relative to the workspace of the json reports generated by cucumber e.g. target
     * - leave empty to scan the whole workspace.
     */
    void jsonReportDirectory(String jsonReportDirectory = '') {
        this.jsonReportDirectory = jsonReportDirectory
    }

    /**
     * Specifies files that will be included into the report. Default include pattern is '&#42;&#42;/&#42;.json'.
     */
    void fileIncludePattern(String fileIncludePattern = '**/*.json') {
        this.fileIncludePattern = fileIncludePattern
    }

    /**
     * Specifies files that will not be excluded from the report. Nothing is excluded by default.
     */
    void fileExcludePattern(String fileExcludePattern = '') {
        this.fileExcludePattern = fileExcludePattern
    }

    /**
     * Sets the status of the build to {@link #buildStatus} if the number of failed steps is bigger than declared value.
     * Default value is 0.
     */
    void failedStepsNumber(int failedStepsNumber = 0) {
        this.failedStepsNumber = failedStepsNumber
    }

    /**
     * Sets the status of the build to {@link #buildStatus} if the number of skipped steps is bigger than declared one.
     * Default value is 0.
     */
    void skippedStepsNumber(int skippedStepsNumber = 0) {
        this.skippedStepsNumber = skippedStepsNumber
    }

    /**
     * Sets the status of the build to {@link #buildStatus} if the number of pending steps is bigger than declared one.
     * Default value is 0.
     */
    void pendingStepsNumber(int pendingStepsNumber = 0) {
        this.pendingStepsNumber = pendingStepsNumber
    }

    /**
     * Sets the status of the build to {@link #buildStatus} if the number of undefined steps is bigger than declared
     * one. Default value is 0.
     */
    void undefinedStepsNumber(int undefinedStepsNumber = 0) {
        this.undefinedStepsNumber = undefinedStepsNumber
    }

    /**
     * Sets the status of the build to {@link #buildStatus} if the number of failed scenarios is bigger than declared
     * one. Default value is 0.
     */
    void failedScenariosNumber(int failedScenariosNumber = 0) {
        this.failedScenariosNumber = failedScenariosNumber
    }

    /**
     * Sets the status of the build to {@link #buildStatus} if the number of failed features is bigger than declared
     * one. Default value is 0.
     */
    void failedFeaturesNumber(int failedFeaturesNumber = 0) {
        this.failedFeaturesNumber = failedFeaturesNumber
    }

    /**
     * When any of the build threshold is met then the build result will be changed to selected state.
     */
    void buildStatus(String buildStatus = null) {
        this.buildStatus = buildStatus
    }

    /**
     * Sets how many reports should be presented in trend's section. Default value is 0 what means no limit.
     */
    void trendsLimit(int trendsLimit = 0) {
        this.trendsLimit = trendsLimit
    }

    /**
     * If set, runs the same test in parallel for multiple devices. Defaults to {@code false}.
     */
    void parallelTesting(boolean parallelTesting = false) {
        this.parallelTesting = parallelTesting
    }

    /**
     * Configure additional information key-value displayed on main page of the report.
     * Default adds no extra information.
     */
    void classifications(List<Classification> classifications = []) {
        this.classifications = classifications
    }

    class Classification implements Context {

        String key
        String value

        void key(String key) {
            this.key = key
        }

        void value(String value) {
            this.value = value
        }
    }
}
