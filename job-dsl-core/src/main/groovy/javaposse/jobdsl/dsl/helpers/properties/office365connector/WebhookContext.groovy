package javaposse.jobdsl.dsl.helpers.properties.office365connector

import javaposse.jobdsl.dsl.Context

class WebhookContext implements Context {

    String url

    boolean notifyBuildStart
    boolean notifyAborted
    boolean notifyFailure
    boolean notifyNotBuilt
    boolean notifySuccess
    boolean notifyUnstable
    boolean notifyBackToNormal
    boolean notifyRepeatedFailure

    int timeout = 30 * 1000

    /**
     * Sets your Office365 webhook URL (as generated by the Connectors Page).
     */
    void url(String url) {
        
        this.url = url
    }

    /**
     * Sends a notification when the build starts. Defaults to {@code false}.
     */
    void notifyBuildStart(boolean notifyBuildStart = true) {
        
        this.notifyBuildStart = notifyBuildStart
    }

    /**
     * Sends a notification when the build is aborted. Defaults to {@code false}.
     */
    void notifyAborted(boolean notifyAborted = true) {
        
        this.notifyAborted = notifyAborted
    }

    /**
     * Sends a notification when the build is failed. Defaults to {@code false}.
     */
    void notifyFailure(boolean notifyFailure = true) {
        
        this.notifyFailure = notifyFailure
    }

    /**
     * Sends a notification when the build is not build. Defaults to {@code false}.
     */
    void notifyNotBuilt(boolean notifyNotBuilt = true) {
        
        this.notifyNotBuilt = notifyNotBuilt
    }

    /**
     * Sends a notification when the build is successful. Defaults to {@code false}.
     */
    void notifySuccess(boolean notifySuccess = true) {
        
        this.notifySuccess = notifySuccess
    }

    /**
     * Sends a notification when the build is unstable. Defaults to {@code false}.
     */
    void notifyUnstable(boolean notifyUnstable = true) {
        
        this.notifyUnstable = notifyUnstable
    }

    /**
     * Sends a notification when the build is back to normal. Defaults to {@code false}.
     */
    void notifyBackToNormal(boolean notifyBackToNormal = true) {
        
        this.notifyBackToNormal = notifyBackToNormal
    }

    /**
     * Sends a notification when the build repeats to fail. Defaults to {@code false}.
     */
    void notifyRepeatedFailure(boolean notifyRepeatedFailure = true) {
        
        this.notifyRepeatedFailure = notifyRepeatedFailure
    }

    /**
     * Sets connection timeout (in milliseconds) for TCP and HTTP. Default timeout is 30 seconds (30,000 ms)
     */
    void timeout(int timeout) {
        
        this.timeout = timeout
    }
}
